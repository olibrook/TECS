// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
        // Determine if the instruction is an 'A' instruction.
        Not(in=instruction[15], out=isAInstruction);
        Not(in=isAInstruction, out=isCInstruction);
        
        // Decode destination portion of an instruction.
        And(a=isCInstruction, b=instruction[3], out=writeM); // Write to memory
        
        // Decode the jump portion of an instruction.
        Not(in=ng, out=notng);
        And(a=instruction[2], b=ng, out=JLE);
        And(a=instruction[1], b=zr, out=JEQ);
        And(a=instruction[0], b=notng, out=JGT);
        Or(a=JLE, b=JEQ, out=doJumpPartial1);
        Or(a=JGT, b=doJumpPartial1, out=doJumpPartial2);
        And(a=doJumpPartial2, b=isCInstruction, out=doJump);
        Not(in=doJump, out=noJump);
        
        // 'A' register
        Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aIn);
        Or(a=isAInstruction, b=instruction[5], out=loadA); // Instruction[5] = store result in A
        ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);
        
        // Determine if the selected operation uses the value in the A register as a parameter
        // or the location it points to in memory (instruction[12] is the 'i' bit).
        And(a=isCInstruction, b=instruction[12], out=memoryAsOperand);
        Mux16(a=aOut, b=inM, sel=memoryAsOperand, out=AorM);
        
        // Program counter
        PC(in=AorM, load=doJump, inc=noJump, reset=reset, out[0..14]=pc);
        
        // 'D' register
        And(a=isCInstruction, b=instruction[4], out=loadD); // Instruction[4] = store result in D
        DRegister(in=aluOut, load=loadD, out=dOut);
        
        // Opcodes just happen to match the spec. of the ALU!!
        ALU(x=dOut, y=AorM,
            zx=instruction[11], nx=instruction[10], zy=instruction[9],
            ny=instruction[8], f=instruction[7], no=instruction[6],
            zr=zr, ng=ng, out=aluOut, out=outM);
}