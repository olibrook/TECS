// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise
        
        
    PARTS:
        Mux16(a=x, b[0..15]=false, sel=zx, out=zx16);
        Mux16(a=y, b[0..15]=false, sel=zy, out=zy16);
        
        Not16(in=zx16, out=nx16);
        Not16(in=zy16, out=ny16);
        
        Mux16(a=zx16, b=nx16, sel=nx, out=presetx);
        Mux16(a=zy16, b=ny16, sel=ny, out=presety);
        
        Add16(a=presetx, b=presety, out=added);
        And16(a=presetx, b=presety, out=anded);
        
        Mux16(a=anded, b=added, sel=f, out=computed);
        
        Not16(in=computed, out=notcomputed);
        
        // Split the outputs up so that:
        //
        // - MSB of the output is sent to ng. Using 2's complement, a 1 indicates a negative output.
        // - Low and high 8-bits of the output are split so they can be easily OR-ed with the 8 way
        //   OR gate we developed, to work out if the output is a zero.
        
        Mux16(a=computed, b=notcomputed, sel=no, out=out, out[0..7]=lsb, out[8..15]=msb, out[15]=ng);
        
        Or8Way(in=lsb, out=lsbor);
        Or8Way(in=msb, out=msbor);
        
        Or(a=lsbor, b=msbor, out=or16);
        Not(in=or16, out=zr);
}
