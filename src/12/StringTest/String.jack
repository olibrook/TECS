// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String {

    field int strLength, strMaxLength;
    field Array str;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
        if(maxLength > 0){
            let str = Array.new(maxLength);
        } else {
            let str = null;
        }
        let strLength = 0;
        let strMaxLength = maxLength;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        if(~(str = null)){
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return strLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        if((j < 0) | (j > (strLength - 1))){
            do Sys.error(1);
        }
        return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        if(~((j>0) & (j<strLength))){
            do Sys.error(1);
        }
        let str[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if(strLength = strMaxLength) {
            do Sys.error(1);
        }
        let str[strLength] = c;
        let strLength = strLength + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if(~(strLength > 0)){
            do Sys.error(1);
        }
        let strLength = strLength - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int i, val, theChar, digit;
        var bool neg, done;

        let val = 0;
        if((strLength > 0) & (str[0] = 45)){  // 45 == '-'
            let i = 1;
            let neg = true;
        } else {
            let i = 0;
            let neg = false;
        }

        let done = false;
        while((i < strLength) & (~done)){
            let theChar = str[i];
            if((theChar > 48) & (theChar < 57)){  // Numeric?
                let digit = theChar - 48;         // To ASCII
                let val = (val * 10) + digit;
            } else {
                let done = true;
            }
            let i = i + 1;
        }
        if(neg){
            let val = -val;
        }
        return val;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
        let strLength = 0;
        if(number < 0){
            do appendChar(45); // 45 == '-'
        }
        do internalSetInt(Math.abs(number));
        return;
    }

    /** For internal use only. Does not handle negative numbers. */
    method void internalSetInt(int number) {
        var int leastSignificantDigit, mostSignificantDigits;

        if(number < 10){
            // At most significant digit.
            do appendChar(number + 48);  // To ASCII

        } else {
            // Chop off least significant digit and call recursively.
            let mostSignificantDigits = number / 10;
            do internalSetInt(mostSignificantDigits);
            let leastSignificantDigit = number - (mostSignificantDigits * 10);
            do appendChar(leastSignificantDigit + 48);  // To ASCII
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
